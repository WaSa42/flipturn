import React, { Component } from 'react';
import { _ } from 'underscore';
import { default as swal } from 'sweetalert2';
import 'sweetalert2/dist/sweetalert2.min.css';
import 'sweetalert2/dist/sweetalert2.min';
import './App.css';

// Levels are going to be stock in database and generated by a bot
// Some analysis and refactoring might be good idea
const levels = [{
    name: 'Level 1',
    difficulty: 'easy',
    board: [{
        squares: [{
            type: 'plain',
            turn: 'off'
        },{
            type: 'plain',
            turn: 'off'
        },{
            type: 'plain',
            turn: 'off'
        }]
    },{
        squares: [{
            type: 'plain',
            turn: 'off'
        },{
            type: 'plain',
            turn: 'off'
        },{
            type: 'plain',
            turn: 'off'
        }]
    },{
        squares: [{
            type: 'plain',
            turn: 'on'
        },{
            type: 'plain',
            turn: 'off'
        },{
            type: 'plain',
            turn: 'off'
        }]
    }]
},{
    name: 'Level 2',
    difficulty: 'easy',
    board: [{
        squares: [{
            type: 'plain',
            turn: 'off'
        },{
            type: 'plain',
            turn: 'off'
        },{
            type: 'plain',
            turn: 'off'
        },{
            type: 'plain',
            turn: 'off'
        },{
            type: 'empty'
        }]
    },{
        squares: [{
            type: 'empty'
        },{
            type: 'plain',
            turn: 'off'
        },{
            type: 'plain',
            turn: 'off'
        },{
            type: 'plain',
            turn: 'off'
        },{
            type: 'empty'
        }]
    },{
        squares: [{
            type: 'empty'
        },{
            type: 'plain',
            turn: 'off'
        },{
            type: 'plain',
            turn: 'off'
        },{
            type: 'plain',
            turn: 'off'
        },{
            type: 'plain',
            turn: 'on'
        }]
    }]
}];

class App extends Component {
    render() {
        return (
            <div className="app">
                <div className="app-content">
                    <Board />
                </div>
            </div>
        );
    }
}

class Square extends React.Component {
    constructor() {
        super();
        this.state = {
            turn: 'off',
        };
    }
    componentDidMount() {
        if (this.props.init.turn)
            this.setState({turn: this.props.init.turn});
    }
    render() {
        return (
            <div className={`square ${this.props.init.type} ${this.state.turn}`} onClick={() => this.props.turn(this)}>
                <span className="row-index hidden">{this.props.row}</span>
                <span className="col-index hidden">{this.props.col}</span>
            </div>
        );
    }
}

Square.propTypes = {
    turn: React.PropTypes.func
};

class Board extends React.Component {
    constructor() {
        super();
        this.state = {
            success: false,
            level: levels[0],
            levelIndex: 0
        };
    }
    handleSquareTurn(square) {
        if (this.state.success)
            return false;

        turn(square);
        const neighbors = [
            this.refs[`square-${square.props.row - 1}-${square.props.col}`],
            this.refs[`square-${square.props.row}-${square.props.col + 1}`],
            this.refs[`square-${square.props.row + 1}-${square.props.col}`],
            this.refs[`square-${square.props.row}-${square.props.col - 1}`]
        ];

        let promise = new Promise((resolve, reject) => neighbors.forEach(neighbor => resolve(neighbor && turn(neighbor))));
        promise.then(() => checkSuccess(this) && this.handleSuccess());

        function turn(square) {
            if (square.props.init.type === 'plain')
                square.setState({turn: square.state.turn === 'on' ? 'off' : 'on' });
        }
        function checkSuccess(board) {
            return _.every(board.refs, square => {
                return square.props.init.type === 'empty' || square.state.turn === 'on'
            })
        }
    }
    handleSuccess() {
        this.setState({success: true});
        swal({
            title: "Congratulation!",
            text: "The level is completed and full of color. Are you ready for the next challenge ?",
            type: "success",
            showCancelButton: false,
            confirmButtonText: "Bring it on !",
            allowOutsideClick: false,
            html: false
        }).then(() => this.nextLevel());
    }
    nextLevel() {
        const levelIndex = ++this.state.levelIndex;
        this.setState({
            success: false,
            level: levels[levelIndex]
        })
    }
    renderRows(level) {
        return level.board.map((row, index) => (
            <div className="row" id={`row-${index}`} key={`row-${index}`}>
                {this.renderSquares(row.squares, index, level)}
            </div>
        ));
    }
    renderSquares(squares, rowIndex, level) {
        return squares.map((square, index) => <Square
            init={square}
            row={rowIndex}
            col={index}
            ref={`square-${rowIndex}-${index}`}
            key={`row-${rowIndex}-col-${index}`}
            turn={this.handleSquareTurn.bind(this)}
        />);
    }
    render() {
        return (
            <div>
                <h1>Everything must be <span className="blue">colorful !</span></h1>
                <div className="board">
                    {this.renderRows(this.state.level)}
                </div>
                <p>{this.state.level.name}</p>
            </div>
        );
    }
}

export default App;
